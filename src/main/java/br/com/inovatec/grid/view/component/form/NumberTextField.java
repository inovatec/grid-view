/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.inovatec.grid.view.component.form;

import br.com.inovatec.grid.view.contract.Field;
import br.com.inovatec.grid.view.util.ContentUtils;
import br.com.inovatec.grid.view.values.Colors;
import br.com.inovatec.grid.view.values.Styles;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.JTextField;

/**
 *
 * @author zrobe
 */
public class NumberTextField extends javax.swing.JPanel implements Field {

    private int charactersLenght = -1;
    
    /**
     * Creates new form TextField
     */
    public NumberTextField() {
        initComponents();
        init();
    }

    /**
     * Creates new form TextField
     *
     * @param charactersLenght
     */
    public NumberTextField(Integer charactersLenght) {
        this();
        this.charactersLenght = charactersLenght;
    }
    
    private void init() {
        this.jTextField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                super.keyTyped(e);
                jTextFieldKeyTyped(e);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField = new javax.swing.JTextField();

        setBorder(javax.swing.BorderFactory.createLineBorder(Colors.COLOR_BORDER_INPUT));
        setLayout(new java.awt.BorderLayout());

        jTextField.setFont(Styles.FONT_FAMILY);
        jTextField.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        add(jTextField, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jTextField;
    // End of variables declaration//GEN-END:variables
    
    public Integer getValue() {
        return ContentUtils.stringToInteger(this.jTextField.getText());
    }
    
    public void setValue(Integer value) {
        this.jTextField.setText(ContentUtils.integerToString(value));
    }
    
    public JTextField getTextField() {
        return jTextField;
    }
    
    @Override
    public void setEnabled(boolean enable) {
        this.jTextField.setEnabled(enable);
    }

    public int getCharactersLenght() {
        return charactersLenght;
    }

    public void setCharactersLenght(int charactersLenght) {
        this.charactersLenght = charactersLenght;
    }
    
    private void jTextFieldKeyTyped(KeyEvent evt) {
        String permitedCharacteres = "0987654321";
        if (!permitedCharacteres.contains(evt.getKeyChar() + "")) {
            evt.consume();
        }
        
        if ((jTextField.getText().length() >= getCharactersLenght()) && (getCharactersLenght() != -1)) {
            evt.consume();
            jTextField.setText(jTextField.getText().substring(0, getCharactersLenght()));
        }
        
        if (evt.isControlDown()) {
            evt.consume();
            
            String text = jTextField.getText();
            String out = text;
            
            for (int i = 0; i < text.length(); i++) {
                char c = text.charAt(i);
                // Verificar se o texto esta contido nos caracteres permitidos
                if (!permitedCharacteres.contains(String.valueOf(c))) { // caso nao esteja, remove-lo
                    out = out.replace(String.valueOf(c), " ");
                }
            }
            
            jTextField.setText(out.trim());
        }
    }
    
    /**
     * Resetar campo
     */
    public void reset() {
        this.jTextField.setText(null);
    }
    
}
